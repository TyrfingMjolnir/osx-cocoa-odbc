//
// Symbols etc
//
   @symbols   = 'true' 'yes' 'false' 'no' '<=' '==' '>=' '!=' '<>' 'between';
   @symbols   = 'not' 'truepredicate' 'falsepredicate' 'or' '||' 'and' '&&';
   @symbols   = 'beginswith' 'contains' 'endwith' 'like' 'in' 'any' 'some';
   @symbols   = 'all' 'none';
   
   @wordChars = '.';
//
// Start
//
@start @before { } = predicate;
//
// Compound predicates
//
   predicate = orPred;
   
   orPred = andPred orTerm *;
   
   orTerm = or andPred;
   
   andPred = basePred andTerm *;
   
   andTerm = and basePred;
   
   basePred = primaryPred | parenPred;
   
   parenPred = openParen predicate closeParen;
   
   primaryPred = simplePred | negatedPred;
   
   negatedPred = not simplePred;
//
// Simple predicates
//
   simplePred = boolPred | aggPred | basicPred;
//
// Basic predicates
//
   basicPred    = identifier (relTerm | betweenTerm | stringTerm | inTerm);
   
   relTerm      = relOp value;
   
   relOp        = lt | le | eq | ge | gt | ne;
   
   betweenTerm  = not ? between openCurl value comma value closeCurl;
   
   inTerm       = not ? in array;
//
// String predicates
//
   stringTerm = stringOp string;
   
   stringOp = bw | co | ew | lk;
//
// Boolean predicates
//
   boolPred = truePred | falsePred;
//
// Aggregate predicates
//
   aggPred = aggOp identifier relTerm;
   
   aggOp = any | some | all | none;
//
// Arrays
//
   array = openCurl elementList ? closeCurl;
   
   elementList = value commaValue *;
   
   commaValue = comma value;
//
// Values
//
   value = boolean | identifier | string | number | parenValue;
   
   boolean = trueLit | falseLit;
   
   parenValue = '(' value ')';
//
// Tokens
//
    trueLit    = 'true'  | 'yes';
    falseLit   = 'false' | 'no';
    between    = 'between';
    not        = 'not' | '!';
    truePred   = 'truepredicate';
    falsePred  = 'falsepredicate';
    in         = 'in';
    any        = 'any';
    some       = 'some';
    all        = 'all';
    none       = 'none';
    
    or  = 'or'  | '||';
    and = 'and' | '&&';
    
    bw = 'beginswith';
    co = 'contains';
    ew = 'endswith';
    lk = 'like';

    identifier = Word;
    string     = QuotedString;
    number     = Number;

    lt = '<';
    le = '<=';
    eq = '==' | '=';
    ge = '>=';
    gt = '>';
    ne = '!=' | "<>";
    
    openCurl  = '{';
    closeCurl = '}';
    comma     = ',';
    
    openParen  = '(';
    closeParen = ')';
    